{"version":3,"file":"static/js/52.4b5162f8.chunk.js","mappings":"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","sources":["components/MovieListItem/MovieInfo.styled.jsx","components/MovieListItem/MovieInfo.jsx","pages/MovieDetailPage/MovieDetailPage.styled.jsx","pages/MovieDetailPage/MovieDetailPage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100px;\n  height: 30px;\n  margin-top: 30px;\n  margin-bottom: 30px;\n  cursor: pointer;\n  border: 2px solid #483d8b;\n  background-color: #e6e6fa;\n  border-radius: 8px;\n  outline: none;\n  box-shadow: inset rgba(72, 61, 139, 0.6) 0 -3px 8px,\n    inset rgba(72, 61, 139, 0.7) 0 3px 8px,\n    rgba(72, 61, 139, 0.8) 0 3px 8px -3px;\n\n  &:hover,\n  &:focus {\n    box-shadow: inset 2px 2px 5px rgba(72, 61, 139, 0.5),\n      1px 1px 5px rgba(72, 61, 139, 1);\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-left: 15px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  border-radius: 8px;\n  border: 2px solid #483d8b;\n`;\n\nexport const Title = styled.h2`\n  font-size: 56px;\n  margin: 0;\n  margin-bottom: 50px;\n  font-weight: 900;\n`;\n\nexport const Overview = styled.p`\n  font-size: 30px;\n  margin: 0;\n  font-weight: 500;\n  margin-bottom: 30px;\n`;\n\nexport const Descr = styled.span`\n  font-size: 18px;\n  text-decoration: underline;\n  font-weight: 500;\n  margin: 0;\n`;\n\nexport const Text = styled.p`\n  font-size: 16px;\n  margin: 0;\n  margin-bottom: 20px;\n`;\n","import React from 'react';\nimport dateFormat, { masks } from 'dateformat';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  Wrapper,\n  Overview,\n  Image,\n  Descr,\n  Text,\n  Info,\n  Title,\n} from './MovieInfo.styled';\nimport { TiArrowBack } from 'react-icons/ti';\n\nmasks.releaseTime = 'dd mmmm yyyy';\n\nfunction MovieInfo({\n  poster_path,\n  title,\n  name,\n  overview,\n  genres,\n  release,\n  runtime,\n  voteAverage,\n}) {\n  const navigate = useNavigate();\n\n  return (\n    <div>\n      <Button type=\"button\" onClick={() => navigate(-1)}>\n        <TiArrowBack size=\"2em\" color=\"#483d8b\" />\n      </Button>\n      <Wrapper>\n        {!poster_path && (\n          <Image\n            src={`https://static.thenounproject.com/png/70760-200.png`}\n            alt={title || name}\n            width=\"250\"\n            height=\"375\"\n          />\n        )}\n        {poster_path && (\n          <Image\n            src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n            alt={title || name}\n          />\n        )}\n        <Info>\n          <Title>{title || name}</Title>\n          <Overview>{overview}</Overview>\n          <Text>\n            <Descr>Genres:</Descr> {genres}\n          </Text>\n          <Text>\n            <Descr>Release:</Descr> {dateFormat(`${release}`, 'releaseTime')}\n          </Text>\n          <Text>\n            <Descr>Runtime:</Descr> {runtime} min\n          </Text>\n          <Text>\n            <Descr>Rating:</Descr> {voteAverage.toFixed(1)}\n          </Text>\n        </Info>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default MovieInfo;\n\nMovieInfo.propTypes = {\n  poster_path: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  overview: PropTypes.string.isRequired,\n  genres: PropTypes.string.isRequired,\n  release: PropTypes.string.isRequired,\n  runtime: PropTypes.number.isRequired,\n  voteAverage: PropTypes.number.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-size: 28px;\n  margin-top: 30px;\n`;\n\nexport const Text = styled(Link)`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  width: 170px;\n  text-decoration: none;\n  color: #483d8b;\n  box-shadow: 0 5px 5px -5px rgba(72, 61, 139, 0.6);\n  margin-bottom: 20px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { BsFillPeopleFill } from 'react-icons/bs';\nimport { MdOutlineReviews } from 'react-icons/md';\n\nimport MovieInfo from 'components/MovieListItem/MovieInfo';\nimport { getMovieDetails } from '../../services/api';\nimport { Wrap, Text } from './MovieDetailPage.styled';\n\nfunction MovieDetailPage() {\n  const [selectedMovie, setselectedMovie] = useState(null);\n  const [genres, setGenres] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const getDetails = async () => {\n      const results = await getMovieDetails(movieId);\n      setselectedMovie(results);\n      setGenres(results.genres);\n    };\n    getDetails();\n  }, [movieId]);\n\n  const handleOpenTabByName = route =>\n    location.pathname.includes(route)\n      ? location.pathname.replace(`/${route}`, '')\n      : route;\n\n  const movieGenres = genres.map(gene => gene.name);\n\n  return (\n    selectedMovie && (\n      <>\n        <MovieInfo\n          poster_path={selectedMovie.poster_path}\n          title={selectedMovie.title}\n          name={selectedMovie.name}\n          overview={selectedMovie.overview}\n          genres={movieGenres.join(', ')}\n          release={selectedMovie.release_date}\n          runtime={selectedMovie.runtime}\n          voteAverage={selectedMovie.vote_average}\n        />\n        <Wrap>\n          <Text to={handleOpenTabByName('cast')}>\n            <BsFillPeopleFill size=\"2em\" color=\"#483d8b\" />\n            Cast\n          </Text>\n          <Text to={handleOpenTabByName('reviews')}>\n            <MdOutlineReviews size=\"2em\" color=\"#483d8b\" />\n            Review\n          </Text>\n        </Wrap>\n        <Outlet />\n      </>\n    )\n  );\n}\n\nexport default MovieDetailPage;\n","import axios from 'axios';\n\nconst KEY = process.env.REACT_APP_KEY;\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n  );\n  return data;\n};\n\nexport const getSearchedMovies = async searchQuery => {\n  const { data } =\n    await axios.get(`https://api.themoviedb.org/3/search/movie?query=${searchQuery}&api_key=${KEY}&language=en-US&page=1&include_adult=false\n`);\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return data;\n};\n"],"names":["Button","styled","Wrapper","Info","Image","Title","Overview","Descr","Text","masks","poster_path","title","name","overview","genres","release","runtime","voteAverage","navigate","useNavigate","type","onClick","size","color","src","alt","width","height","dateFormat","toFixed","Wrap","Link","useState","selectedMovie","setselectedMovie","setGenres","movieId","useParams","location","useLocation","useEffect","getDetails","getMovieDetails","results","handleOpenTabByName","route","pathname","includes","replace","movieGenres","map","gene","join","release_date","vote_average","to","KEY","process","getTrending","axios","data","getSearchedMovies","searchQuery","getMovieCredits","getMovieReviews"],"sourceRoot":""}